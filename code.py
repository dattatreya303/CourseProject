# -*- coding: utf-8 -*-
"""code.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1rp8E4YMt7YGSZwlw_3llrgnN9Fvk4ez3

[link text](https://)This is the template notebook I use to finetune BART, T5, and PEGASUS. It is based on code found in this tutorial [Finetuning Transformer for Summary Generation](https://colab.research.google.com/github/abhimishra91/transformers-tutorials/blob/master/transformers_summarization_wandb.ipynb) by [Abhishek Kumar Mishra](https://github.com/abhimishra91). After finetuning each model, I save it to the my google cloud bucket.

## Importing Modules
"""

!pip install transformers -q
!pip install sentencepiece -q
!pip install wandb -q

# Importing stock libraries
import numpy as np
import pandas as pd
import torch
import torch.nn.functional as F
from torch.utils.data import Dataset, DataLoader, RandomSampler, SequentialSampler

# Importing the T5 modules from huggingface/transformers
from transformers import T5Tokenizer, T5ForConditionalGeneration #AutoTokenizer, AutoModel

# WandB – Import the wandb library
import wandb

!nvidia-smi

# # Setting up the device for GPU usage
from torch import cuda
device = 'cuda' if cuda.is_available() else 'cpu'

!wandb login

"""#Data Processing"""

from google.colab import auth, drive
import os

auth.authenticate_user()
drive.mount('/content/gdrive/')

os.chdir("/content/gdrive/My Drive/TIS/")

ls

df = pd.read_csv("merged_prefix_transcript_description_summ.tsv",sep='\t',header=0)

df = df.drop('Unnamed: 0', 1)

df.columns

a = 'hello my name is gargi'
a_list = a.split(' ')[:2]
a_vapis = ' '.join(a_list)

a_vapis



len(df['episode_prefix'].unique())

def get_word_len(row):
  return len(row.split(' '))

df['episode_len'] = df.apply(lambda row: get_word_len(row['episode_transcript']), axis=1)

def cap_word_len(row):
  row_len = len(row.split(' '))

  if(row_len>7000):
    row_list = row.split(' ')[:7000]
    smaller_row = ' '.join(row_list)
    return smaller_row
  else:
    return row

df['capped_episode_transcript'] = df.apply(lambda row: cap_word_len(row['episode_transcript']), axis=1)

df['capped_episode_len'] = df.apply(lambda row: get_word_len(row['capped_episode_transcript']), axis=1)

df.describe()

from sklearn.model_selection import train_test_split

train_dataset_podcast, val_dataset_podcast = train_test_split(df, test_size=0.4)



















project_id = 'test-281700'
!gcloud config set project {project_id}
!gsutil ls

bucket_name = 'spotify_asr_dataset'
#download dataset
!gsutil -m cp -r gs://{bucket_name}/dataset.csv /content/
#download metadata for episodes
!gsutil -m cp -r gs://{bucket_name}/metadata.tsv /content/
#download filtered episodes
!gsutil -m cp -r gs://{bucket_name}/filtered-episode-ids.txt /content/

dataset = pd.read_csv('dataset.csv')
podcasts_metadata = pd.read_csv('metadata.tsv', sep='\t')

full_dataset = pd.merge(left=podcasts_metadata, right=dataset, how='left', left_on='episode_uri', right_on='episode_id')
del full_dataset['episode_uri']

filter = pd.read_csv('filtered-episode-ids.txt', sep=" ", header=None, names=["episode_id"])
filter.head()

train_data = full_dataset.loc[full_dataset["episode_id"].isin(filter['episode_id'])]

train_data = train_data[['episode_id', 'transcript', 'episode_description']]

len(train_data)

train_data['transcript'] = 'summarize: ' + train_data['transcript']

train_dataset_podcast.head()

train_data.reset_index(drop=True, inplace=True)
train_data.head(5)

validation_data = full_dataset.loc[~full_dataset["episode_id"].isin(filter['episode_id'])]
validation_data = validation_data[['episode_id', 'transcript', 'episode_description']]
validation_data['transcript'] = 'summarize: ' + validation_data['transcript']
validation_data.reset_index(drop=True, inplace=True)
validation_data.head(5)

len(validation_data)

#use only a subset of the data, struggling with the full thing
train_data = train_data[:3000] #train on a subset of the data because colab runs out of memory or run time disconnects
validation_data = validation_data[:20]
print(len(train_data), len(validation_data))

"""#Training"""



train_dataset_podcast = train_dataset_podcast.drop(['episode_transcript','episode_len','capped_episode_len'],axis=1)

val_dataset_podcast = val_dataset_podcast.drop(['episode_transcript','episode_len','capped_episode_len'],axis=1)



train_dataset_podcast.iloc[1]

class CustomDataset(Dataset):

    def __init__(self, dataframe, tokenizer, source_len, summ_len):
        self.tokenizer = tokenizer
        self.data = dataframe
        self.source_len = source_len
        self.summ_len = summ_len
        self.text = self.data.episode_description #target summary
        self.ctext = self.data.capped_episode_transcript #original transcript

    def __len__(self):
        return len(self.text)

    def __getitem__(self, index):
        ctext = str(self.ctext.iloc[index])
        ctext = ' '.join(ctext.split())

        text = str(self.text.iloc[index])
        text = ' '.join(text.split())

        source = self.tokenizer.batch_encode_plus([ctext], max_length= self.source_len, pad_to_max_length=True,return_tensors='pt')
        target = self.tokenizer.batch_encode_plus([text], max_length= self.summ_len, pad_to_max_length=True,return_tensors='pt')

        source_ids = source['input_ids'].squeeze()
        source_mask = source['attention_mask'].squeeze()
        target_ids = target['input_ids'].squeeze()
        target_mask = target['attention_mask'].squeeze()

        return {
            'source_ids': source_ids.to(dtype=torch.long), 
            'source_mask': source_mask.to(dtype=torch.long), 
            'target_ids': target_ids.to(dtype=torch.long),
            'target_ids_y': target_ids.to(dtype=torch.long)
        }

def train(epoch, tokenizer, model, device, loader, optimizer):
    model.train()
    for _,data in enumerate(loader, 0):
        #print("CHECK")
        y = data['target_ids'].to(device, dtype = torch.long)
        y_ids = y[:, :-1].contiguous()
        lm_labels = y[:, 1:].clone().detach()
        lm_labels[y[:, 1:] == tokenizer.pad_token_id] = -100
        ids = data['source_ids'].to(device, dtype = torch.long)
        mask = data['source_mask'].to(device, dtype = torch.long)

        outputs = model(input_ids = ids, attention_mask = mask, decoder_input_ids=y_ids, lm_labels=lm_labels)
        loss = outputs[0]
        
        if _%10 == 0:
            #wandb.log({"Training Loss": loss.item()})
            print({"Training Loss": loss.item()})


        if _%500==0:
            print(f'Epoch: {epoch}, Loss:  {loss.item()}')
        
        optimizer.zero_grad()
        loss.backward()
        optimizer.step()
        # xm.optimizer_step(optimizer)
        # xm.mark_step()

def validate(epoch, tokenizer, model, device, loader):
    model.eval()
    predictions = []
    actuals = []
    with torch.no_grad():
        for _, data in enumerate(loader, 0):
            y = data['target_ids'].to(device, dtype = torch.long)
            ids = data['source_ids'].to(device, dtype = torch.long)
            mask = data['source_mask'].to(device, dtype = torch.long)

            generated_ids = model.generate(
                input_ids = ids,
                attention_mask = mask, 
                max_length=150, 
                num_beams=2,
                repetition_penalty=2.5, 
                length_penalty=1.0, 
                early_stopping=True
                )
            preds = [tokenizer.decode(g, skip_special_tokens=True, clean_up_tokenization_spaces=True) for g in generated_ids]
            target = [tokenizer.decode(t, skip_special_tokens=True, clean_up_tokenization_spaces=True)for t in y]
            if _%100==0:
                print(f'Completed {_}')

            predictions.extend(preds)
            actuals.extend(target)
    return predictions, actuals

!mkdir t5-model-3000

import warnings
warnings.filterwarnings('ignore')



config = wandb.config          # Initialize config
config.TRAIN_BATCH_SIZE = 2    # input batch size for training (default: 64)
config.VALID_BATCH_SIZE = 2    # input batch size for testing (default: 1000)
config.TRAIN_EPOCHS = 2        # number of epochs to train (default: 10)
config.VAL_EPOCHS = 1 
config.LEARNING_RATE = 1e-4    # learning rate (default: 0.01)
config.SEED = 42               # random seed (default: 42)
config.MAX_LEN = 512
config.SUMMARY_LEN = 150

train_params = {
    'batch_size': config.TRAIN_BATCH_SIZE,
    'shuffle': True,
    'num_workers': 0
    }

val_params = {
    'batch_size': config.VALID_BATCH_SIZE,
    'shuffle': False,
    'num_workers': 0
    }







def main():
    # WandB – Initialize a new run
    #wandb.init(project="transformers_summarization_part2")

    # WandB – Config is a variable that holds and saves hyperparameters and inputs
    # Defining some key variables that will be used later on in the training  
    config = wandb.config          # Initialize config
    config.TRAIN_BATCH_SIZE = 2    # input batch size for training (default: 64)
    config.VALID_BATCH_SIZE = 2    # input batch size for testing (default: 1000)
    config.TRAIN_EPOCHS = 1        # number of epochs to train (default: 10)
    config.VAL_EPOCHS = 1 
    config.LEARNING_RATE = 1e-4    # learning rate (default: 0.01)
    config.SEED = 42               # random seed (default: 42)
    config.MAX_LEN = 512
    config.SUMMARY_LEN = 150 

    # Set random seeds and deterministic pytorch for reproducibility
    torch.manual_seed(config.SEED) # pytorch random seed
    np.random.seed(config.SEED) # numpy random seed
    torch.backends.cudnn.deterministic = True

    # tokenzier for encoding the text
    tokenizer = T5Tokenizer.from_pretrained("t5-base") #replace with relevant transformer model
    

    # Importing and Pre-Processing the domain data
    # Selecting the needed columns only. 
    # Adding the summarzie text in front of the text. This is to format the dataset similar to how T5 model was trained for summarization task. 

    
    # Creation of Dataset and Dataloader
    # Defining the train size. So 80% of the data will be used for training and the rest will be used for validation. 

    train_dataset= train_dataset_podcast
    val_dataset= val_dataset_podcast

    print("TRAIN Dataset: {}".format(train_dataset.shape))
    print("TEST Dataset: {}".format(val_dataset.shape))


    # Creating the Training and Validation dataset for further creation of Dataloader
    training_set = CustomDataset(train_dataset_podcast, tokenizer, config.MAX_LEN, config.SUMMARY_LEN)
    val_set = CustomDataset(val_dataset_podcast, tokenizer, config.MAX_LEN, config.SUMMARY_LEN)

    # Defining the parameters for creation of dataloaders
    train_params = {
        'batch_size': config.TRAIN_BATCH_SIZE,
        'shuffle': True,
        'num_workers': 0
        }

    val_params = {
        'batch_size': config.VALID_BATCH_SIZE,
        'shuffle': False,
        'num_workers': 0
        }

    # Creation of Dataloaders for testing and validation. This will be used down for training and validation stage for the model.
    training_loader = DataLoader(training_set, **train_params)
    print(training_loader)
    val_loader = DataLoader(val_set, **val_params)


    
    # Defining the model. We are using t5-base model and added a Language model layer on top for generation of Summary. 
    # Further this model is sent to device (GPU/TPU) for using the hardware.
    model = T5ForConditionalGeneration.from_pretrained("t5-base") #replace with relevant transformer model
    model = model.to(device)

    # Defining the optimizer that will be used to tune the weights of the network in the training session. 
    optimizer = torch.optim.Adam(params =  model.parameters(), lr=config.LEARNING_RATE)

    # Log metrics with wandb
    #wandb.watch(model, log="all")
    # Training loop
    print('Initiating Fine-Tuning for the model on our dataset')

    for epoch in range(config.TRAIN_EPOCHS):
        train(epoch, tokenizer, model, device, training_loader, optimizer)
      
    
    #torch.save(model, '/t5_model.pt')

    # model = torch.load(PATH)
    # model.eval()

    


    # Validation loop and saving the resulting file with predictions and acutals in a dataframe.
    # Saving the dataframe as predictions.csv
    print('Now generating summaries on our fine tuned model for the validation dataset and saving it in a dataframe')
    for epoch in range(config.VAL_EPOCHS):
        predictions, actuals = validate(epoch, tokenizer, model, device, val_loader)
        final_df = pd.DataFrame({'Generated Text':predictions,'Actual Text':actuals})
        final_df.to_csv('predictions.csv', index=False)
        print('Output Files generated for review')
    
    model.save_pretrained('./t5-model-3000')
    tokenizer.save_pretrained('./t5-model-3000')

if __name__ == '__main__':
    main()



tokenizer = T5Tokenizer.from_pretrained("t5-base") #replace with relevant transformer model

training_set = CustomDataset(train_dataset_podcast, tokenizer, config.MAX_LEN, config.SUMMARY_LEN)

training_loader = DataLoader(training_set, **train_params)

for data in enumerate(training_loader):
  print(1)

next(iter(training_loader))

?





!pip install transformers==2.9.0 
!pip install pytorch_lightning==0.7.5



"""#Predictions and Model Saving"""

predictions = pd.read_csv('predictions.csv')

predictions.iloc[12]['Generated Text']

predictions.iloc[12]['Actual Text']

!sudo apt install zip unzip
!zip -r t5-model-3000 t5-model-3000

#save model to gcp bucket
!gsutil -m cp /content/t5-model-3000.zip gs://{bucket_name}/